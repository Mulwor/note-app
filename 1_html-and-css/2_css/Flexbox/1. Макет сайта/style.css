/*мы делаем элемент #main флекс-контейнером, а шапку и подвал оставляем 
блочными элементами. Другими словами, флексбоксом становится только средняя
часть. Вот фрагмент, который делает её флекс-контейнером.*/
#main {
  /*div id=main*/
  display: flex;
  min-height: calc(
    100vh - 40vh
  ); /*100% от высоты области просмотра - высота шапки и подвала (по 20vh каждый)*/
}
/*Это гарантирует, что макет будет занимать всю высоту экрана, даже если в 
нём мало содержимого. В итоге подвал никогда не поднимется и не оставит 
пустого пространства под ним, если содержимое занимает меньше высоты экрана.*/

/*flex - это сокращённое свойство, определяющее способность гибкого 
элемента растягиваться или сжиматься для заполнения собой доступного 
свободного пространства.*/
/*Одно значение, число без единиц: flex-grow(Определяет как много свободного пространства во flex-контейнере должно быть назначено текущему элементу)*/
#main > article {
  flex: 1;
}

#main > nav,
#main > aside {
  /* Все 3 значения для nav и aside: 
1. flex-grow 
2. flex-shrink - определяет фактор сжатия flex-элемента. Flex-элементы будут 
заполнять контейнер в зависимости от значения flex-shrink, когда стандартная 
ширина flex-элементов шире, чем flex-контейнер.
3. flex-basis - устанавливает исходный основной размер флекс-элемента 
до распределения свободного пространства.  Таким образом, мы просто устанавливаем 
ширину <nav> и <aside>, а также их цвет фона */
  flex: 0 0 20vw;
  background: beige;
}

/*Определяет порядок, используемый для размещения flex элементов в их flex 
контейнере. Элементы располагаются в восходящем порядке по значению order.*/
#main > nav {
  order: -1;
}
header,
footer,
article,
nav,
aside {
  padding: 1em;
}
header,
footer {
  background: yellowgreen;
  height: 20vh;
}
