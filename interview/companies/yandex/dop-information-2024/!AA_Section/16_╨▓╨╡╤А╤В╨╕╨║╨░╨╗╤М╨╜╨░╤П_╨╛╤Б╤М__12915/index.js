// Дан массив точек с целочисленными координатами (x, y). Нужно определить,
// существует ли вертикальная прямая, которая делит все точки, не лежащие на ней,
// на два симметричных набора. Наборы считаются симметричными, если каждая точка из
// одного набора имеет пару из другого набора, симметричную относительно данной прямой.
//
//     Примеры входных данных и ожидаемого результата:

// isVertSym([[0, 0], [0, 0], [1, 1], [2, 2], [3, 1], [4, 0], [4, 0]]) // true
// isVertSym([[0, 0], [0, 0], [1, 1], [2, 2], [3, 1], [4, 0]])         // false
// isVertSym([])                                                      // true
// isVertSym([[0, 0]])                                                // true
// isVertSym([[0, 0], [10, 0]])                                       // true
// isVertSym([[0, 0], [11, 1]])                                       // false
// isVertSym([[0, 0], [1, 0], [3, 0]])                                // false





// Решение должно быть за 0(н) через hashmap

console.log(isVertSym([[0, 0], [0, 0], [1, 1], [2, 2], [3, 1], [4, 0], [4, 0]])); // true
console.log(isVertSym([[0, 0], [0, 0], [1, 1], [2, 2], [3, 1], [4, 0]]));        // false
console.log(isVertSym([]));                                                     // true
console.log(isVertSym([[0, 0]]));                                               // true
console.log(isVertSym([[0, 0], [10, 0]]));                                      // true
console.log(isVertSym([[0, 0], [11, 1]]));                                      // false
console.log(isVertSym([[0, 0], [1, 0], [3, 0]]));                               // false


// ===================================================================
//
// 1. Найти min и max
// 2. Из мин и макс сделать ось симметрии
// 3. Положить все точки в hashmap
// 4. Пройтись по hashmap и проверить на симметрию


function isVertSym(list) {
    const points = new Map(); // Хэш-таблица для хранения точек
    let min = 0;
    let max = 0
    // 1. Проходим по всем точкам, находим минимальный и максимальный x,
    //    а также считаем количество каждой уникальной точки.
    for (const [x, y] of list) {
        const key = x + ',' + y;
        // Проверяем, есть ли такая точка в хэш-таблице
        const value = points.get(key) || 0;
        // Если точка уже есть в хэш-таблице, то увеличиваем ее количество
        points.set(key, value + 1);//
        min = Math.min(min, x);
        max = Math.max(max, x);
    }
    // 2. Вычисляем ось симметрии как середину между min и max
    const mid = (min + max) / 2;

    for (const [x, y] of list) {
        // Находим координату симметричной точки:
        // Она должна иметь такой же 2*mid - x
        const key = (2 * mid - x) + ',' + y;
        const value = points.get(key);
        // Проверяем, есть ли эта зеркальная точка в хэш-таблице
        // Если точка уже есть в хэш-таблице, то уменьшаем ее количество
        value === 1 ? points.delete(key) : points.set(key, value - 1);
    }

    return points.size === 0;
}

