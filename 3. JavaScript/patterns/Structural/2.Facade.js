/* Паттерн Facade (фасад) - скрывает сложную логику за простым фасадом, то есть
собрать различные сложные структуры, объединить их и выдать простой способ мани-
пуляции. 

Применяется он в том случае когда необхъодимо спрятать большую и непонятную
реализацию внутри себя, а на ружу выдавать понятный интерфейс реализации, поэтому
если в коде встречается громоздкие реализации запутанно логикой или куча параметров
и аргументов, которые влияют на итоговый результат, то все это можно заворачивать
в класс facade, а для всех манипуляций можно создать лишь пару простых методов, ко-
торые запускают нужный алгоритм */

/* Например: сборка автомобилей осуществляется на конвеере, часть операций идет вручную,
часть операции идет в автоматическом режиме, но если представить, что все идет автоматически, то
все что нужно сделать инженеру придя на работу - нажать кнопку собрать автомобиль. В целом
его не должно интересовать там какие операции там происходят. По нажатию на кнопку, спустя
2-3 часа у него должен появится готовый автомобиль */

/* У нас есть класс конвеер, внутри этого класса есть большое кол-во операций, по завершению
которой должен получится готовый автомобиль*/

class Сonveyor {
	setBody() { console.log('Body set!'); }
	getEngine() { console.log('Dismantle Engine!'); }
	setEngine() { console.log('Engine set!'); }
    setInterior() { console.log('Exterior added!'); }
	changeInterior() { console.log('Update interior!'); }
	setExterior() { console.log('Added interior!'); }
	setWheels() { console.log('Wheels!'); }
	addElectronics() { console.log('Added electronics!'); }
	paint() { console.log('Car painted!'); }
}

/* При нажатие на кнопку мы должны запустить начальный обработчик собрать все данных заполненных
полей, сформировать запрос, отправить его, получить ответ и обработать этот ответ, после чего результат
выполнения вывести на экран. По отдельности - эти методы конечно полезны, но практически не нужны, в 
отрыве всего стека не выполняют полностью всю операцию, но никто не мешает ввести дополнительную абстракцию
над методами, чтобы задействовать их все и на выходе вернуть лишь 1 общий метод - данная абстракция
как раз и называется фасад */ 

class СonveyorFacade {
	constructor(car) {
		this.car = car;
	}
    /* Все сборочные операции мы собрали в единый assembleCar(), при вызове этого метода собираются готовый автомобиль
    а что крутится под капотом нас не интересует*/
	assembleCar() {
		this.car.setBody();
		this.car.setEngine();
		this.car.setInterior();
		this.car.setExterior();
		this.car.setWheels();
		this.car.addElectronics();
		this.car.paint();
	}
}
// Используя фасад, то это просто вызов 1 метода
const conveyor = new СonveyorFacade (new Сonveyor());
const car = conveyor.assembleCar();
console.log(car)