/* Proxy - структурный паттерн, который вместо реально объектов предоставляет специальные объекты заменители.
Эти объекты перехватывают вызов к оригиналам и позволяют сделать что-то до или после обращения к оригинальному
объекту - прослойка, которая помогает произвести доп.манипуляции до того как отдать полнейший контроль

Используется в авторизации, в зависимости от ваешго статуса (авторизированы вы или нет) у вас появляется либо
полный доступ к ресурсу либо он может быть частично ограничен, либо полностью закрыт*/


// Предположим у нас есть автомобиль с голосовым управлением открытие замка, где паролем стоит какое-то кодовое слово
class CarAccess {
	open()  { console.log('Opening car door') }
	close() { console.log('Closing the car door') }
};

// Реализуем прокси-объект, который будет обеспечивать безопасность открытия наших дверей (голосовой валидатор)
class SecuritySystem {
	constructor(door) {
		this.door = door;
	}

	/*Данная охранная система принимает любую дверь и оборачивает его в свою проверку. Мы запрашиваем идентификацию водителя
	И просим ввести (произнести) его пароль. В случае правильно ввода открывается дверь*/
	open(password) {
		if (this.authenticate(password)) {
			this.door.open();
		} else {
			console.log('Access denied!');
		}
	}
	authenticate(password) {
		return password === 'Ilon';
	}

	/* В случае ошибки говорим, что доступ закрыт. Причем данная охранная система также оборачивает
	метод close оригинального объекта в свой собственный. Как вы можете видеть мы создали прослойку между
	пользователем и оригинальным классом (создали заместитетеля с тем же интерфейсом, что и оригинал)*/
	close() {
		this.door.close()
	}
};

// Создаем экземпляр обернутую в нашу охранную систему
const door = new SecuritySystem (new CarAccess())
door.open('Jack');       //Access denied!
door.open('Ilon');       //Opening car door
door.close();            //Closing the car door

//Прокси - это некая прослойка между прокси и оригинальными объектами, к которым эти запросы обращены (нужная для доп.операций)

