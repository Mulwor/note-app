// ! 13. Roman to Integer
// ! Link: https://leetcode.com/problems/roman-to-integer/description/

// ? –í —Å—Ç—Ä–æ–∫–µ –º—ã –ø–æ–ª—É—á–∞–µ–º —Ä–∏–º—Å–∫–∏–µ —Ü–∏—Ñ—Ä—ã, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Ö –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ —á–∏—Å–ª–∞
// ? –∏ —Å–ª–æ–∂–∏—Ç—å

var romanToInt = function(s) {
  const map = new Map([
    [ "I", 1 ],
    [ "V", 5 ],
    [ "X", 10 ],
    [ "L", 50 ],
    [ "C", 100 ],
    [ "D", 500 ],
    [ "M", 1000 ]
  ])

  let result = 0;

  for (let i = 0; i < s.length; i++) {
    result += map.get(s[i])
  }

  return result
};

// ? –û–¥–Ω–∞–∫–æ –Ω—É–∂–Ω–æ —Ç–∞–∫–∂–µ —É—á–∏—Ç—ã–≤–∞—Ç—å, —á—Ç–æ –µ—Å—Ç—å —Ü–∏—Ñ—Ä—ã –Ω–∞–ø—Ä–∏–º–µ—Ä - IV, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –∏–∑ s. 
// ? –ò –µ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —á–∏—Å–ª–æ 
// ! –ü–µ—Ä–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ
var romanToInt = function(s) {
  // ? O(1)
  const map = new Map([
    [ "I", 1 ],
    [ "V", 5 ],
    [ "X", 10 ],
    [ "L", 50 ],
    [ "C", 100 ],
    [ "D", 500 ],
    [ "M", 1000 ]
  ])

  // ? –ö–∞–∂–¥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–º–µ–Ω—ã –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∑–∞ ùëÇ(ùëõ), –≥–¥–µ ùëõ - –¥–ª–∏–Ω–∞ —Å—Ç—Ä–æ–∫–∏ s. –¢–∞–∫ –∫–∞–∫
  // ? –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è 6 –∑–∞–º–µ–Ω –ø–æ–¥—Ä—è–¥, –∏—Ö —Å–æ–≤–æ–∫—É–ø–Ω–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å –±—É–¥–µ—Ç ùëÇ(6ùëõ), —á—Ç–æ 
  // ? —É–ø—Ä–æ—â–∞–µ—Ç—Å—è –¥–æ ùëÇ(ùëõ)
  s = s.replace("IV","IIII");
  s = s.replace("IX","VIIII");
  s = s.replace("XL","XXXX");
  s = s.replace("XC","LXXXX");
  s = s.replace("CD","CCCC");
  s = s.replace("CM","DCCCC");

  // ? O(1)
  let result = 0;

  // ? O(n)
  for (let i = 0; i < s.length; i++) {
      result += map.get(s[i])
  }

  return result
};

// ! –í—Ç–æ—Ä–æ–µ —Ä–µ—à–µ–Ω–∏–µ
var romanToInt = function(s) {
  const numerals = {
    "I": 1,
    "V": 5,
    "X": 10,
    "L": 50,
    "C": 100,
    "D": 500,
    "M": 1000,
  }

  let result = 0;

  for(let i = 0; i < s.length; i++){
    // 1000, 100
    // 100, 1000
    // 10, 100
    // 1, 5
    if(numerals[s[i]] < numerals[s[i + 1]]) {
      // ? –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ª–æ–≥–∏–∫–∞, –∫–æ—Ç–æ—Ä–∞—è —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç 
      // ? –Ω–∞ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–æ–≤
      result += nextI - currentI;
      // ? –ü—Ä–æ–ø—É—Å–∫–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å IV
      i++
    } else {
      result += currentI
    }
  } return result
};